# Credits: see below
#
[include]
  # Load private config, not to be pushed to repo
  path = ~/.gitconfig.local

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = blue bold
  frag = yellow
  old = red
  new = green
[color "status"]
  added = green
  changed = yellow
  untracked = red

[core]
	excludesfile = ~/.gitignore_global
	#precomposeunicode = true

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.0.5.2/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[alias]
  # git-svn: svn update
  spull = !git-svn fetch && git-svn rebase
  # git-svn: svn commit
  spush = !git-svn dcommit
  # Pull with rebase and update submodules
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive 
  # Pull with rebase and update submodules
  ups = !git pull --rebase --prune $@ && git submodule update --init --recursive
  # Pull with rebase and update submodules (deep)
  upd = "!f() { \
                if [ -d .git ]; then\
                  git up;\
                else\
                   echo "$(pwd) is not a git repository";\
                   read -p \"Do you want to do a deep update? (Y/n) \" choice;\
                   choice=${choice:-Y};\
                   if [[ \"$choice\" =~ ^([Yy])$ ]]; then \
                     find . -name '.git' -exec sh -c '(echo \"== Updating `dirname '{}'`\" && cd `dirname '{}'`  && git up)' ';';\
                   fi;\
                fi;\
              }; f"
  # Push to origin master
  pom = push origin master
  # Checkout
  co = "!f() { \
               trap 'echo ERROR: Operation failed; return' ERR; \
               git checkout $@; \
               last_commit=$(git log -1 HEAD --pretty=format:%s);\
                if [[ $last_commit == *\"WIP\"* ]]; then\
                  read -p \"You have WIP commit. Do you want to reset? (Y/n) \" choice;\
                  choice=${choice:-Y};\
                 if [[ \"$choice\" =~ ^([Yy])$ ]]; then \
                   git uncommit ;\
                 else\
                   echo \"Leaving the WIP commit as is.\";\
                 fi;\
                fi;\
              }; f"
  # create and checkout a new branch and keep all your changes.
  cob = checkout -b
  # stage the changes in a given file.
  stage = !git add -u
  # unstage is the opposite of git add. It lets you remove items from the staging area.
  unstage = reset HEAD
  # view the current changes in the staging area.
  staged = diff --cached
  # view the current changes not yet in the staging area.
  unstaged = diff
  # work in progress, a quick save before swithing branch
  wip = !git add -A :/ && git commit -m 'WIP - Undo this temporary commit.'
  # Send every change to trash. Commit before trashing so we can find it via 'git reflog'
  trash = !git add -A && git commit -qm 'Trashed @ $(date +"%F %T")' && git reset HEAD~1 --hard
  # undo last commit and unstage them
  uncommit = reset HEAD~1
  # just the differences between lines.
  word-diff = diff --word-diff
  # show files ignored by git
  ignored = ls-files -o -i --exclude-standard
  frequently = !'history | cut -c 8- | grep git | sort | uniq -c  | sort -n -r | head -n 5'
  # find deleted file(s), parameter file name 
  deleted = !git log --diff-filter=D --summary | grep
  # view content of last commit
  log-last-commit = log --name-status HEAD^..HEAD     
  # merge branch with squash
  merge-squash  =  merge --squash
  #log in pretty format 
  log-pretty = log --pretty=format:'%C(yellow)%h%Creset %ai |%C(green)%d%Creset %s %C(bold blue)<%an>%Creset' --abbrev-commit 
  #log in pretty format with graph 
  log-graph = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
  # create a backup of the branch BAK_mybranch
  bbak = !git branch $(git branch | grep '*' | sed -e 's/* /BAK_/')
  #bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r ; }; f"
  # Show git branches by date
  branch-bydate = "! f() { for k in $(git branch $@ | sed 's/^..//; s/ .*//'); do  echo "$(git log -1 --pretty='%Cgreen%ci %Cblue(%cr)%Creset ' $k) $k" ;  done | sort -r; }; f"
  # List all git aliases
  #alias = config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
  alias = config --get-regexp ^alias\\.
  # Change last commit comment
  amend = commit --amend -m
  # Clean up repository
  #clean = "!f() { \
  #              if [ ! -d .git ]; then\
  #                echo "Must be in the root of the repo";\
  #                exit 1;\
  #              else\
  #                rm -rf .git/refs/original/* ;\
  #                git reflog expire --all --expire-unreachable=0 ;\
  #                git repack -A -d ;\
  #                git prune ;\rm -rf .git/refs/original/*
  #              fi;\
  #            }; f"

  # Shortened commands 
  br = branch -v
  ci = commit
  #co = checkout
  di = diff
  fi = flow init
  ff = flow feature
  fr = flow release
  fh = flow hotfix
  lo = !git log-pretty
  ms = !git merge-squash
  st = status
  # and even shorter
  b = branch -v
  r = remote -v
  t = tag -l
	

[push]
	default = simple

[commit]
  template = ~/.git_commit_msg

# credits:
# http://haacked.com/archive/2014/07/28/github-flow-aliases/ 

