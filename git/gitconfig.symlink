# Credits: see below
#
[include]
  # Load private config, not to be pushed to repo
  path = ~/.gitconfig.local

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = blue bold
  frag = yellow
  old = red
  new = green
[color "status"]
  added = green
  changed = yellow
  untracked = red

[core]
	excludesfile = ~/.gitignore_global
	#precomposeunicode = true

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.0.4/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[alias]
  #--- reassigned ---
  log = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  
  #--- new commands ---
  # git-svn: svn update
  spull = !git-svn fetch && git-svn rebase
  # git-svn: svn commit
  spush = !git-svn dcommit
  # Pull with rebase and update submodules
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  # Push to origin master
  pom = push origin master
  # create and checkout a new branch and keep all your changes.
  cob = checkout -b
  # stage the changes in a given file.
  stage = !git add -u
  # unstage is the opposite of git add. It lets you remove items from the staging area.
  unstage = reset HEAD
  # view the current changes in the staging area.
  staged = diff --cached
  # view the current changes not yet in the staging area.
  unstaged = diff
  # work in progress, a quick save before swithing branch
  wip = !git add -A :/ && git commit -m 'WIP - Undo this temporary commit.'
  # Send every change to trash. Commit before trashing so we can find it via 'git reflog'
  trash = !git add -A && git commit -qm 'Trashed @ $(date +"%F %T")' && git reset HEAD~1 --hard
  # undo last commit and unstage them
  uncommit = reset HEAD~1
  # just the differences between lines.
  word-diff = diff --word-diff
  # show files ignored by git
  ignored = ls-files -o -i --exclude-standard
  frequently = !'history | cut -c 8- | grep git | sort | uniq -c  | sort -n -r | head -n 5'
  # find deleted file(s), parameter file name 
  deleted = !git log --diff-filter=D --summary | grep
  # view content of last commit
  log-last-commit = log --name-status HEAD^..HEAD     
  # merge branch with squash
  merge-squash  =  merge --squash
  #log in pretty format 
  log-pretty = log --pretty=format:'%C(yellow)%h%Creset %ai |%C(green)%d%Creset %s %C(bold blue)<%an>%Creset' --abbrev-commit 
  #log in pretty format with graph 
  log-graph = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
  # create a backup of the branch BAK_mybranch
  bak = !git branch $(git branch | grep '*' | sed -e 's/* /BAK_/')
  #bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r ; }; f"
  # Show git branches by date
  branch-bydate = "! f() { for k in $(git branch $@ | sed 's/^..//; s/ .*//'); do  echo "$(git log -1 --pretty='%Cgreen%ci %Cblue(%cr)%Creset ' $k) $k" ;  done | sort -r; }; f"
  # List all git aliases
  alias = config --get-regexp ^alias\\.
  # Change last commit comment
  amend = commit --amend -m 


  # Shortened commands 
  ci = commit
  br = branch -v
  co = checkout
  di = diff
  st = status
  lo = !git log-pretty
  ms = !git merge-squash
  # and even shorter
  b = branch -v
  r = remote -v
  t = tag -l
	


[push]
	default = simple

# credits:
# http://haacked.com/archive/2014/07/28/github-flow-aliases/ 
