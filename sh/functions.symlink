#!/bin/sh
#
# Functions that are nice to have with you 

# easy create and cd into a directory (mkd -p myproject/src) 
function mcd() { mkdir -p "$@" && cd "$_"; }

# SSH
function ssh-addkeys {
#  if ps | grep -v grep | grep ssh-agent > /dev/null
#  then
#  echo "ssh-agent already running, everything is fine"
#  else
#  eval `ssh-agent` > /dev/null
#  fi
#  ssh-add ~/.ssh/id*
  
  if [ -f ~/.agent.env ] ; then
    . ~/.agent.env > /dev/null
  if ! kill -0 $SSH_AGENT_PID > /dev/null 2>&1; then
    echo "Stale agent file found. Spawning new agent… "
    eval `ssh-agent | tee ~/.agent.env`
    ssh-add
  fi 
  else
    echo "Starting ssh-agent"
    eval `ssh-agent | tee ~/.agent.env`
    ssh-add
  fi  
}

#Reconnect or start a tmux or screen session over ssh
# http://alias.sh/reconnect-or-start-tmux-or-screen-session-over-ssh 
sssh (){ ssh -t "$1" 'tmux attach || tmux new || screen -DR'; }

# Print machine details
# http://www.thegeekstuff.com/2010/04/unix-bash-function-examples/
function machine()
{
    echo -e "\nCurrent date :" ; date
    echo -e "\nMachine information:" ; uname -a
    echo -e "\nMachine status :" ; uptime
    echo -e "\nMemory status :" ; free
    echo -e "\nFilesystem status :"; df -h
    echo -e "\nUsers logged on:" ; w -h
}

# Display Total, Used and Free Memory
# http://www.thegeekstuff.com/2010/07/3-shell-scripts/
function memory()
{
    echo "Memory Space Details"
    free -t -m | grep "Total" | awk '{ print "Total Memory space : "$2 " MB";
    print "Used Memory Space : "$3" MB";
    print "Free Memory : "$4" MB";
    }'

    echo "Swap memory Details"
    free -t -m | grep "Swap" | awk '{ print "Total Swap space : "$2 " MB";
    print "Used Swap Space : "$3" MB";
    print "Free Swap : "$4" MB";
    }'
}

# List Processes based on %CPU and Memory Usage
# http://www.thegeekstuff.com/2010/07/3-shell-scripts/
function process() 
{
    #List processes based on %cpu and memory usage

    echo "Start Time" `date`
    # By default, it display the list of processes based on the cpu and memory usage #
    if [ $# -eq 0 ]
    then

        echo "List of processes based on the %cpu Usage"
        ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu  # sorted based on %cpu
        echo "List of processes based on the memory Usage"
        ps -e -orss=,args= | sort -b -k1,1n # sorted bases rss value

    # If arguements are given (mem/cpu)
    else
        case "$1" in
        mem)
         echo "List of processes based on the memory Usage"
         ps -e -orss=,args= | sort -b -k1,1n
         ;;
        cpu)
         echo "List of processes based on the %cpu Usage"
         ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu
         ;;
        *)
            echo "Invalid Argument Given \n"
            echo "Usage : $0 mem/cpu"
            exit 1
        esac	

    fi
    echo "End Time" `date`
}